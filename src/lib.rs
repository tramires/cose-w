pub(crate) mod cbor;
pub mod headers;
pub mod keys;

pub mod agent;
pub mod algs;
pub mod constants;
pub mod message;

pub(crate) mod cose_struct;

#[cfg(test)]
mod test_vecs {
    use crate::agent;
    use crate::algs;
    use crate::headers;
    use crate::keys;
    use crate::message::CoseMessage;
    use wasm_bindgen_test::*;

    // KEYS
    const ELEVEN: [u8; 114] = [
        166, 1, 2, 32, 1, 2, 66, 49, 49, 33, 88, 32, 186, 197, 177, 28, 173, 143, 153, 249, 199,
        43, 5, 207, 75, 158, 38, 210, 68, 220, 24, 159, 116, 82, 40, 37, 90, 33, 154, 134, 214,
        160, 158, 255, 34, 88, 32, 32, 19, 139, 248, 45, 193, 182, 213, 98, 190, 15, 165, 74, 183,
        128, 74, 58, 100, 182, 215, 44, 207, 237, 107, 111, 182, 237, 40, 187, 252, 17, 126, 35,
        88, 32, 87, 201, 32, 119, 102, 65, 70, 232, 118, 118, 12, 149, 32, 208, 84, 170, 147, 195,
        175, 176, 78, 48, 103, 5, 219, 96, 144, 48, 133, 7, 180, 211,
    ];
    const MERIADOC: [u8; 149] = [
        166, 1, 2, 32, 1, 2, 88, 36, 109, 101, 114, 105, 97, 100, 111, 99, 46, 98, 114, 97, 110,
        100, 121, 98, 117, 99, 107, 64, 98, 117, 99, 107, 108, 97, 110, 100, 46, 101, 120, 97, 109,
        112, 108, 101, 33, 88, 32, 101, 237, 165, 161, 37, 119, 194, 186, 232, 41, 67, 127, 227,
        56, 112, 26, 16, 170, 163, 117, 225, 187, 91, 93, 225, 8, 222, 67, 156, 8, 85, 29, 34, 88,
        32, 30, 82, 237, 117, 112, 17, 99, 247, 249, 228, 13, 223, 159, 52, 27, 61, 201, 186, 134,
        10, 247, 224, 202, 124, 167, 233, 238, 205, 0, 132, 209, 156, 35, 88, 32, 175, 249, 7, 201,
        159, 154, 211, 170, 230, 196, 205, 242, 17, 34, 188, 226, 189, 104, 181, 40, 62, 105, 7,
        21, 74, 217, 17, 132, 15, 162, 8, 207,
    ];
    const PEREGRIN: [u8; 146] = [
        166, 1, 2, 32, 1, 2, 88, 33, 112, 101, 114, 101, 103, 114, 105, 110, 46, 116, 111, 111,
        107, 64, 116, 117, 99, 107, 98, 111, 114, 111, 117, 103, 104, 46, 101, 120, 97, 109, 112,
        108, 101, 33, 88, 32, 152, 245, 10, 79, 246, 192, 88, 97, 200, 134, 13, 19, 166, 56, 234,
        86, 195, 245, 173, 117, 144, 187, 251, 240, 84, 225, 199, 180, 217, 29, 98, 128, 34, 88,
        32, 240, 20, 0, 176, 137, 134, 120, 4, 184, 233, 252, 150, 195, 147, 33, 97, 241, 147, 79,
        66, 35, 6, 145, 112, 217, 36, 183, 224, 59, 248, 34, 187, 35, 88, 32, 2, 209, 247, 230,
        242, 108, 67, 212, 134, 141, 135, 206, 178, 53, 49, 97, 116, 10, 172, 241, 247, 22, 54, 71,
        152, 75, 82, 42, 132, 141, 241, 195,
    ];
    const PEREGRIN_PROD: [u8; 77] = [
        165, 1, 2, 32, 1, 33, 88, 32, 152, 245, 10, 79, 246, 192, 88, 97, 200, 134, 13, 19, 166,
        56, 234, 86, 195, 245, 173, 117, 144, 187, 251, 240, 84, 225, 199, 180, 217, 29, 98, 128,
        34, 245, 35, 88, 32, 2, 209, 247, 230, 242, 108, 67, 212, 134, 141, 135, 206, 178, 53, 49,
        97, 116, 10, 172, 241, 247, 22, 54, 71, 152, 75, 82, 42, 132, 141, 241, 195,
    ];
    const OUR_SECRET: [u8; 52] = [
        164, 1, 4, 2, 74, 111, 117, 114, 45, 115, 101, 99, 114, 101, 116, 32, 88, 32, 132, 155, 87,
        33, 157, 174, 72, 222, 100, 109, 7, 219, 181, 51, 86, 110, 151, 102, 134, 69, 124, 20, 145,
        190, 58, 118, 220, 234, 108, 66, 113, 136, 3, 15,
    ];
    const OUR_SECRET2: [u8; 34] = [
        163, 1, 4, 2, 75, 111, 117, 114, 45, 115, 101, 99, 114, 101, 116, 50, 32, 80, 132, 155, 87,
        134, 69, 124, 20, 145, 190, 58, 118, 220, 234, 108, 66, 113,
    ];
    const UID: [u8; 77] = [
        163, 1, 4, 2, 88, 36, 48, 49, 56, 99, 48, 97, 101, 53, 45, 52, 100, 57, 98, 45, 52, 55, 49,
        98, 45, 98, 102, 100, 54, 45, 101, 101, 102, 51, 49, 52, 98, 99, 55, 48, 51, 55, 32, 88,
        32, 132, 155, 87, 33, 157, 174, 72, 222, 100, 109, 7, 219, 181, 51, 86, 110, 151, 102, 134,
        69, 124, 20, 145, 190, 58, 118, 220, 234, 108, 66, 113, 136,
    ];

    const RSA_PUB: [u8; 305] = [
        165, 3, 56, 36, 1, 3, 32, 89, 1, 0, 188, 126, 41, 208, 223, 126, 32, 204, 157, 200, 213, 9,
        224, 246, 136, 149, 146, 42, 240, 239, 69, 33, 144, 212, 2, 198, 27, 85, 67, 52, 167, 191,
        145, 201, 165, 112, 36, 15, 153, 79, 174, 27, 105, 3, 91, 207, 173, 79, 126, 36, 158, 178,
        96, 135, 194, 102, 94, 124, 149, 140, 150, 123, 21, 23, 65, 61, 195, 249, 122, 67, 22, 145,
        165, 153, 155, 37, 124, 198, 205, 53, 107, 173, 22, 141, 146, 155, 139, 174, 144, 32, 117,
        14, 116, 207, 96, 246, 253, 53, 214, 187, 63, 201, 63, 194, 137, 0, 71, 134, 148, 245, 8,
        179, 62, 124, 0, 226, 79, 144, 237, 243, 116, 87, 252, 62, 142, 252, 253, 47, 66, 48, 99,
        1, 168, 32, 90, 183, 64, 81, 83, 49, 213, 193, 143, 12, 100, 212, 164, 59, 229, 47, 196,
        64, 64, 15, 107, 252, 85, 138, 110, 50, 136, 76, 42, 245, 111, 41, 229, 197, 39, 128, 206,
        167, 40, 95, 92, 5, 127, 192, 223, 218, 35, 45, 10, 218, 104, 27, 1, 73, 93, 157, 14, 50,
        25, 102, 51, 88, 142, 40, 158, 89, 3, 95, 246, 100, 240, 86, 24, 159, 47, 16, 254, 5, 130,
        123, 121, 108, 50, 110, 62, 116, 143, 250, 124, 88, 158, 210, 115, 201, 196, 52, 54, 205,
        219, 74, 106, 34, 82, 62, 248, 188, 178, 34, 22, 21, 183, 153, 150, 111, 26, 186, 91, 200,
        75, 122, 39, 207, 33, 67, 1, 0, 1, 2, 88, 31, 109, 101, 114, 105, 97, 100, 111, 99, 46, 98,
        114, 97, 110, 100, 121, 98, 117, 99, 107, 64, 114, 115, 97, 46, 101, 120, 97, 109, 112,
        108, 101,
    ];

    const RSA_PRIV: [u8; 1089] = [
        170, 3, 56, 36, 1, 3, 32, 89, 1, 0, 188, 126, 41, 208, 223, 126, 32, 204, 157, 200, 213, 9,
        224, 246, 136, 149, 146, 42, 240, 239, 69, 33, 144, 212, 2, 198, 27, 85, 67, 52, 167, 191,
        145, 201, 165, 112, 36, 15, 153, 79, 174, 27, 105, 3, 91, 207, 173, 79, 126, 36, 158, 178,
        96, 135, 194, 102, 94, 124, 149, 140, 150, 123, 21, 23, 65, 61, 195, 249, 122, 67, 22, 145,
        165, 153, 155, 37, 124, 198, 205, 53, 107, 173, 22, 141, 146, 155, 139, 174, 144, 32, 117,
        14, 116, 207, 96, 246, 253, 53, 214, 187, 63, 201, 63, 194, 137, 0, 71, 134, 148, 245, 8,
        179, 62, 124, 0, 226, 79, 144, 237, 243, 116, 87, 252, 62, 142, 252, 253, 47, 66, 48, 99,
        1, 168, 32, 90, 183, 64, 81, 83, 49, 213, 193, 143, 12, 100, 212, 164, 59, 229, 47, 196,
        64, 64, 15, 107, 252, 85, 138, 110, 50, 136, 76, 42, 245, 111, 41, 229, 197, 39, 128, 206,
        167, 40, 95, 92, 5, 127, 192, 223, 218, 35, 45, 10, 218, 104, 27, 1, 73, 93, 157, 14, 50,
        25, 102, 51, 88, 142, 40, 158, 89, 3, 95, 246, 100, 240, 86, 24, 159, 47, 16, 254, 5, 130,
        123, 121, 108, 50, 110, 62, 116, 143, 250, 124, 88, 158, 210, 115, 201, 196, 52, 54, 205,
        219, 74, 106, 34, 82, 62, 248, 188, 178, 34, 22, 21, 183, 153, 150, 111, 26, 186, 91, 200,
        75, 122, 39, 207, 33, 67, 1, 0, 1, 2, 88, 31, 109, 101, 114, 105, 97, 100, 111, 99, 46, 98,
        114, 97, 110, 100, 121, 98, 117, 99, 107, 64, 114, 115, 97, 46, 101, 120, 97, 109, 112,
        108, 101, 34, 89, 1, 0, 9, 105, 255, 4, 252, 193, 225, 100, 124, 32, 64, 44, 243, 247, 54,
        212, 202, 227, 63, 38, 76, 28, 110, 227, 37, 44, 252, 199, 124, 222, 245, 51, 215, 0, 87,
        10, 192, 154, 80, 215, 100, 110, 223, 177, 248, 106, 19, 188, 171, 207, 0, 189, 101, 159,
        39, 129, 61, 8, 132, 53, 151, 39, 24, 56, 188, 70, 237, 71, 67, 254, 116, 29, 155, 195,
        142, 11, 243, 109, 64, 105, 129, 199, 184, 31, 206, 84, 134, 28, 235, 251, 133, 173, 35,
        168, 180, 131, 60, 27, 238, 24, 192, 94, 78, 67, 106, 134, 150, 54, 152, 6, 70, 238, 203,
        131, 158, 77, 175, 67, 76, 156, 109, 251, 243, 165, 92, 225, 219, 115, 228, 144, 47, 137,
        56, 75, 214, 249, 236, 211, 57, 159, 177, 237, 75, 131, 242, 141, 53, 108, 142, 97, 159,
        31, 13, 201, 107, 190, 139, 117, 193, 129, 44, 165, 143, 54, 2, 89, 234, 235, 29, 23, 19,
        12, 60, 10, 39, 21, 169, 155, 228, 152, 152, 232, 113, 246, 8, 138, 41, 87, 13, 194, 255,
        160, 206, 255, 250, 39, 241, 240, 85, 203, 170, 191, 216, 137, 78, 12, 194, 79, 23, 110,
        52, 235, 173, 50, 39, 138, 70, 111, 138, 52, 166, 133, 172, 200, 32, 125, 158, 193, 252,
        187, 208, 148, 153, 109, 199, 60, 99, 5, 252, 163, 22, 104, 190, 87, 177, 105, 157, 11,
        180, 86, 204, 136, 113, 191, 251, 205, 35, 88, 128, 243, 49, 89, 62, 20, 127, 211, 163, 35,
        86, 117, 240, 211, 106, 6, 229, 66, 111, 124, 94, 120, 228, 155, 42, 205, 62, 38, 139, 165,
        14, 72, 237, 42, 82, 243, 180, 250, 73, 45, 107, 207, 112, 235, 63, 145, 90, 113, 96, 120,
        161, 19, 101, 46, 63, 164, 198, 213, 10, 248, 96, 108, 45, 44, 40, 236, 175, 8, 59, 113,
        45, 108, 238, 18, 99, 193, 32, 93, 160, 59, 187, 250, 111, 92, 45, 139, 26, 150, 25, 64,
        137, 202, 203, 48, 108, 132, 74, 131, 46, 43, 3, 43, 95, 150, 167, 234, 182, 207, 225, 16,
        114, 153, 1, 60, 139, 14, 159, 8, 155, 186, 187, 197, 4, 221, 139, 193, 56, 186, 75, 36,
        88, 128, 198, 107, 93, 220, 171, 112, 23, 225, 64, 131, 242, 133, 79, 97, 153, 127, 53, 99,
        108, 134, 242, 249, 43, 23, 45, 37, 85, 88, 142, 225, 237, 137, 155, 166, 182, 173, 236,
        10, 2, 2, 75, 46, 120, 169, 28, 137, 18, 86, 168, 87, 30, 14, 251, 59, 172, 63, 65, 114,
        77, 224, 54, 236, 143, 160, 249, 62, 44, 251, 221, 165, 156, 111, 241, 129, 110, 179, 220,
        147, 141, 78, 69, 145, 36, 35, 243, 243, 75, 126, 150, 195, 158, 46, 77, 101, 163, 220,
        214, 223, 210, 180, 239, 82, 120, 65, 0, 18, 114, 247, 120, 85, 182, 215, 93, 64, 213, 75,
        182, 91, 209, 223, 133, 56, 233, 110, 196, 218, 214, 13, 37, 88, 128, 31, 103, 124, 253,
        190, 73, 239, 123, 126, 161, 184, 163, 59, 185, 210, 96, 34, 159, 32, 241, 86, 45, 55, 56,
        100, 190, 164, 221, 157, 151, 229, 164, 242, 181, 57, 145, 98, 76, 182, 215, 216, 54, 221,
        186, 28, 188, 16, 46, 4, 5, 208, 234, 92, 249, 140, 254, 188, 30, 41, 138, 210, 13, 87, 73,
        133, 158, 232, 178, 60, 96, 64, 83, 209, 254, 29, 191, 95, 55, 196, 222, 246, 109, 16, 251,
        52, 158, 95, 73, 173, 130, 221, 180, 53, 113, 157, 247, 189, 78, 229, 241, 7, 213, 213, 47,
        163, 232, 173, 153, 131, 181, 56, 186, 231, 37, 145, 226, 201, 138, 202, 167, 90, 190, 209,
        25, 45, 255, 116, 87, 38, 88, 128, 123, 110, 36, 6, 253, 3, 188, 117, 234, 34, 171, 148,
        168, 210, 66, 80, 106, 107, 191, 227, 107, 200, 19, 45, 187, 206, 80, 184, 66, 84, 37, 6,
        43, 105, 122, 250, 24, 15, 86, 133, 233, 14, 17, 235, 87, 18, 210, 230, 226, 178, 78, 42,
        30, 124, 117, 213, 148, 14, 8, 48, 30, 130, 68, 112, 239, 56, 86, 27, 227, 233, 208, 95,
        159, 202, 142, 111, 105, 160, 40, 169, 40, 232, 94, 88, 33, 46, 120, 155, 165, 119, 184, 3,
        120, 215, 169, 149, 250, 106, 254, 167, 75, 227, 100, 102, 26, 103, 159, 130, 119, 108, 89,
        5, 244, 63, 122, 53, 105, 41, 134, 39, 30, 89, 78, 29, 17, 249, 102, 141,
    ];

    // RFC TEST VECTORS
    const C11_BYTES: [u8; 103] = [
        216, 98, 132, 64, 160, 84, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 99, 111,
        110, 116, 101, 110, 116, 46, 129, 131, 67, 161, 1, 38, 161, 4, 66, 49, 49, 88, 64, 226,
        174, 175, 212, 13, 105, 209, 157, 254, 110, 82, 7, 124, 93, 127, 244, 228, 8, 40, 44, 190,
        251, 93, 6, 203, 244, 20, 175, 46, 25, 217, 130, 172, 69, 172, 152, 184, 84, 76, 144, 139,
        69, 7, 222, 30, 144, 183, 23, 195, 211, 72, 22, 254, 146, 106, 43, 152, 245, 58, 253, 47,
        160, 243, 10,
    ];

    const C12_BYTES: [u8; 277] = [
        216, 98, 132, 64, 160, 84, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 99, 111,
        110, 116, 101, 110, 116, 46, 130, 131, 67, 161, 1, 38, 161, 4, 66, 49, 49, 88, 64, 226,
        174, 175, 212, 13, 105, 209, 157, 254, 110, 82, 7, 124, 93, 127, 244, 228, 8, 40, 44, 190,
        251, 93, 6, 203, 244, 20, 175, 46, 25, 217, 130, 172, 69, 172, 152, 184, 84, 76, 144, 139,
        69, 7, 222, 30, 144, 183, 23, 195, 211, 72, 22, 254, 146, 106, 43, 152, 245, 58, 253, 47,
        160, 243, 10, 131, 68, 161, 1, 56, 35, 161, 4, 88, 30, 98, 105, 108, 98, 111, 46, 98, 97,
        103, 103, 105, 110, 115, 64, 104, 111, 98, 98, 105, 116, 111, 110, 46, 101, 120, 97, 109,
        112, 108, 101, 88, 132, 0, 162, 210, 138, 124, 43, 219, 21, 135, 135, 116, 32, 246, 90,
        223, 125, 11, 154, 6, 99, 93, 209, 222, 100, 187, 98, 151, 76, 134, 63, 11, 22, 13, 210,
        22, 55, 52, 3, 78, 106, 192, 3, 176, 30, 135, 5, 82, 76, 92, 76, 164, 121, 169, 82, 240,
        36, 126, 232, 203, 11, 79, 183, 57, 123, 160, 141, 0, 158, 12, 139, 244, 130, 39, 12, 197,
        119, 26, 161, 67, 150, 110, 90, 70, 154, 9, 246, 19, 72, 128, 48, 197, 176, 126, 198, 215,
        34, 227, 131, 90, 219, 91, 45, 140, 68, 233, 95, 251, 19, 135, 125, 210, 88, 40, 102, 136,
        53, 53, 222, 59, 176, 61, 1, 117, 63, 131, 171, 135, 187, 79, 122, 2, 151,
    ];

    const C13_BYTES: [u8; 180] = [
        216, 98, 132, 64, 161, 7, 131, 67, 161, 1, 38, 161, 4, 66, 49, 49, 88, 64, 90, 192, 94, 40,
        157, 93, 14, 27, 10, 127, 4, 138, 93, 43, 100, 56, 19, 222, 213, 11, 201, 228, 146, 32,
        244, 247, 39, 143, 133, 241, 157, 74, 119, 214, 85, 201, 211, 181, 30, 128, 90, 116, 176,
        153, 225, 224, 133, 170, 205, 151, 252, 41, 215, 47, 136, 126, 136, 2, 187, 102, 80, 204,
        235, 44, 84, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 99, 111, 110, 116,
        101, 110, 116, 46, 129, 131, 67, 161, 1, 38, 161, 4, 66, 49, 49, 88, 64, 226, 174, 175,
        212, 13, 105, 209, 157, 254, 110, 82, 7, 124, 93, 127, 244, 228, 8, 40, 44, 190, 251, 93,
        6, 203, 244, 20, 175, 46, 25, 217, 130, 172, 69, 172, 152, 184, 84, 76, 144, 139, 69, 7,
        222, 30, 144, 183, 23, 195, 211, 72, 22, 254, 146, 106, 43, 152, 245, 58, 253, 47, 160,
        243, 10,
    ];
    const C21_BYTES: [u8; 98] = [
        210, 132, 67, 161, 1, 38, 161, 4, 66, 49, 49, 84, 84, 104, 105, 115, 32, 105, 115, 32, 116,
        104, 101, 32, 99, 111, 110, 116, 101, 110, 116, 46, 88, 64, 142, 179, 62, 76, 163, 29, 28,
        70, 90, 176, 90, 172, 52, 204, 107, 35, 213, 143, 239, 92, 8, 49, 6, 196, 210, 90, 145,
        174, 240, 176, 17, 126, 42, 249, 162, 145, 170, 50, 225, 74, 184, 52, 220, 86, 237, 42, 34,
        52, 68, 84, 126, 1, 241, 29, 59, 9, 22, 229, 164, 195, 69, 202, 203, 54,
    ];

    const C31_BYTES: [u8; 151] = [
        216, 96, 132, 67, 161, 1, 1, 161, 5, 76, 201, 207, 77, 242, 254, 108, 99, 43, 247, 136,
        100, 19, 88, 36, 122, 219, 226, 112, 156, 168, 24, 251, 65, 95, 30, 93, 246, 111, 78, 26,
        81, 5, 59, 166, 214, 90, 26, 12, 82, 163, 87, 218, 122, 100, 75, 128, 112, 161, 81, 176,
        129, 131, 68, 161, 1, 56, 24, 162, 32, 164, 1, 2, 32, 1, 33, 88, 32, 152, 245, 10, 79, 246,
        192, 88, 97, 200, 134, 13, 19, 166, 56, 234, 86, 195, 245, 173, 117, 144, 187, 251, 240,
        84, 225, 199, 180, 217, 29, 98, 128, 34, 245, 4, 88, 36, 109, 101, 114, 105, 97, 100, 111,
        99, 46, 98, 114, 97, 110, 100, 121, 98, 117, 99, 107, 64, 98, 117, 99, 107, 108, 97, 110,
        100, 46, 101, 120, 97, 109, 112, 108, 101, 64,
    ];
    const C32_BYTES: [u8; 91] = [
        216, 96, 132, 67, 161, 1, 10, 161, 5, 77, 137, 245, 47, 101, 161, 197, 128, 147, 59, 82,
        97, 167, 108, 88, 28, 117, 53, 72, 161, 155, 19, 7, 8, 76, 167, 178, 5, 105, 36, 237, 149,
        242, 227, 177, 112, 6, 223, 233, 49, 182, 135, 184, 71, 129, 131, 67, 161, 1, 41, 162, 51,
        80, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 4, 74, 111,
        117, 114, 45, 115, 101, 99, 114, 101, 116, 64,
    ];
    const C33_BYTES: [u8; 326] = [
        216, 96, 132, 67, 161, 1, 1, 162, 5, 76, 201, 207, 77, 242, 254, 108, 99, 43, 247, 136,
        100, 19, 7, 131, 68, 161, 1, 56, 35, 161, 4, 88, 30, 98, 105, 108, 98, 111, 46, 98, 97,
        103, 103, 105, 110, 115, 64, 104, 111, 98, 98, 105, 116, 111, 110, 46, 101, 120, 97, 109,
        112, 108, 101, 88, 132, 0, 146, 150, 99, 200, 120, 155, 178, 129, 119, 174, 40, 70, 126,
        102, 55, 125, 161, 35, 2, 215, 249, 89, 77, 41, 153, 175, 165, 223, 165, 49, 41, 79, 136,
        150, 242, 182, 205, 241, 116, 0, 20, 244, 199, 241, 163, 88, 227, 166, 207, 87, 244, 237,
        111, 176, 47, 207, 143, 122, 169, 137, 245, 223, 208, 127, 7, 0, 163, 167, 216, 243, 198,
        4, 186, 112, 250, 148, 17, 189, 16, 194, 89, 27, 72, 62, 29, 44, 49, 222, 0, 49, 131, 228,
        52, 216, 251, 161, 143, 23, 164, 199, 227, 223, 160, 3, 172, 28, 243, 211, 13, 68, 210, 83,
        60, 73, 137, 211, 172, 56, 195, 139, 113, 72, 28, 195, 67, 12, 157, 101, 231, 221, 255, 88,
        36, 122, 219, 226, 112, 156, 168, 24, 251, 65, 95, 30, 93, 246, 111, 78, 26, 81, 5, 59,
        166, 214, 90, 26, 12, 82, 163, 87, 218, 122, 100, 75, 128, 112, 161, 81, 176, 129, 131, 68,
        161, 1, 56, 24, 162, 32, 164, 1, 2, 32, 1, 33, 88, 32, 152, 245, 10, 79, 246, 192, 88, 97,
        200, 134, 13, 19, 166, 56, 234, 86, 195, 245, 173, 117, 144, 187, 251, 240, 84, 225, 199,
        180, 217, 29, 98, 128, 34, 245, 4, 88, 36, 109, 101, 114, 105, 97, 100, 111, 99, 46, 98,
        114, 97, 110, 100, 121, 98, 117, 99, 107, 64, 98, 117, 99, 107, 108, 97, 110, 100, 46, 101,
        120, 97, 109, 112, 108, 101, 64,
    ];

    const C34_BYTES: [u8; 173] = [
        216, 96, 132, 67, 161, 1, 1, 161, 5, 76, 2, 209, 247, 230, 242, 108, 67, 212, 134, 141,
        135, 206, 88, 36, 100, 248, 77, 145, 59, 166, 10, 118, 7, 10, 154, 72, 242, 110, 151, 232,
        99, 226, 133, 41, 216, 245, 51, 94, 95, 1, 101, 238, 233, 118, 180, 165, 246, 198, 240,
        157, 129, 131, 68, 161, 1, 56, 31, 163, 34, 88, 33, 112, 101, 114, 101, 103, 114, 105, 110,
        46, 116, 111, 111, 107, 64, 116, 117, 99, 107, 98, 111, 114, 111, 117, 103, 104, 46, 101,
        120, 97, 109, 112, 108, 101, 4, 88, 36, 109, 101, 114, 105, 97, 100, 111, 99, 46, 98, 114,
        97, 110, 100, 121, 98, 117, 99, 107, 64, 98, 117, 99, 107, 108, 97, 110, 100, 46, 101, 120,
        97, 109, 112, 108, 101, 53, 66, 1, 1, 88, 24, 65, 224, 215, 111, 87, 157, 189, 13, 147,
        106, 102, 45, 84, 216, 88, 32, 55, 222, 46, 54, 111, 222, 28, 98,
    ];
    const C41_BYTES: [u8; 52] = [
        208, 131, 67, 161, 1, 10, 161, 5, 77, 137, 245, 47, 101, 161, 197, 128, 147, 59, 82, 97,
        167, 140, 88, 28, 89, 116, 225, 185, 154, 58, 76, 192, 154, 101, 154, 162, 233, 231, 255,
        241, 97, 211, 140, 231, 28, 180, 92, 228, 96, 255, 181, 105,
    ];
    const C42_BYTES: [u8; 41] = [
        208, 131, 67, 161, 1, 10, 161, 6, 66, 97, 167, 88, 28, 37, 42, 137, 17, 212, 101, 193, 37,
        182, 118, 71, 57, 112, 15, 1, 65, 237, 9, 25, 45, 225, 57, 224, 83, 189, 9, 171, 202,
    ];
    const C51_BYTES: [u8; 57] = [
        216, 97, 133, 67, 161, 1, 15, 160, 84, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101,
        32, 99, 111, 110, 116, 101, 110, 116, 46, 72, 158, 18, 38, 186, 31, 129, 184, 72, 129, 131,
        64, 162, 1, 37, 4, 74, 111, 117, 114, 45, 115, 101, 99, 114, 101, 116, 64,
    ];

    const C52_BYTES: [u8; 214] = [
        216, 97, 133, 67, 161, 1, 5, 160, 84, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101,
        32, 99, 111, 110, 116, 101, 110, 116, 46, 88, 32, 129, 160, 52, 72, 172, 211, 211, 5, 55,
        110, 170, 17, 251, 63, 228, 22, 169, 85, 190, 44, 190, 126, 201, 111, 1, 44, 153, 75, 195,
        241, 106, 65, 129, 131, 68, 161, 1, 56, 26, 163, 34, 88, 33, 112, 101, 114, 101, 103, 114,
        105, 110, 46, 116, 111, 111, 107, 64, 116, 117, 99, 107, 98, 111, 114, 111, 117, 103, 104,
        46, 101, 120, 97, 109, 112, 108, 101, 4, 88, 36, 109, 101, 114, 105, 97, 100, 111, 99, 46,
        98, 114, 97, 110, 100, 121, 98, 117, 99, 107, 64, 98, 117, 99, 107, 108, 97, 110, 100, 46,
        101, 120, 97, 109, 112, 108, 101, 53, 88, 64, 77, 133, 83, 231, 231, 79, 60, 106, 58, 157,
        211, 239, 40, 106, 129, 149, 203, 248, 162, 61, 25, 85, 140, 207, 236, 125, 52, 184, 36,
        244, 45, 146, 189, 6, 189, 44, 127, 2, 113, 240, 33, 78, 20, 31, 183, 121, 174, 40, 86,
        171, 245, 133, 165, 131, 104, 176, 23, 231, 242, 169, 229, 206, 77, 181, 64,
    ];
    const C53_BYTES: [u8; 109] = [
        216, 97, 133, 67, 161, 1, 14, 160, 84, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101,
        32, 99, 111, 110, 116, 101, 110, 116, 46, 72, 54, 245, 175, 175, 11, 171, 93, 67, 129, 131,
        64, 162, 1, 36, 4, 88, 36, 48, 49, 56, 99, 48, 97, 101, 53, 45, 52, 100, 57, 98, 45, 52,
        55, 49, 98, 45, 98, 102, 100, 54, 45, 101, 101, 102, 51, 49, 52, 98, 99, 55, 48, 51, 55,
        88, 24, 113, 26, 176, 220, 47, 196, 88, 93, 206, 39, 239, 250, 103, 129, 200, 9, 62, 186,
        144, 111, 34, 123, 110, 176,
    ];
    const C54_BYTES: [u8; 309] = [
        216, 97, 133, 67, 161, 1, 5, 160, 84, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101,
        32, 99, 111, 110, 116, 101, 110, 116, 46, 88, 32, 191, 72, 35, 94, 128, 155, 92, 66, 233,
        149, 242, 183, 213, 250, 19, 98, 14, 126, 216, 52, 227, 55, 246, 170, 67, 223, 22, 30, 73,
        233, 50, 62, 130, 131, 68, 161, 1, 56, 28, 162, 32, 164, 1, 2, 32, 3, 33, 88, 66, 0, 67,
        177, 38, 105, 172, 172, 63, 210, 120, 152, 255, 186, 11, 205, 46, 108, 54, 109, 83, 188,
        77, 183, 31, 144, 154, 117, 147, 4, 172, 251, 94, 24, 205, 199, 186, 11, 19, 255, 140, 118,
        54, 39, 26, 105, 36, 177, 172, 99, 192, 38, 136, 7, 91, 85, 239, 45, 97, 53, 116, 231, 220,
        36, 47, 121, 195, 34, 245, 4, 88, 30, 98, 105, 108, 98, 111, 46, 98, 97, 103, 103, 105,
        110, 115, 64, 104, 111, 98, 98, 105, 116, 111, 110, 46, 101, 120, 97, 109, 112, 108, 101,
        88, 40, 51, 155, 196, 247, 153, 132, 205, 198, 179, 230, 206, 95, 49, 90, 76, 125, 43, 10,
        196, 102, 252, 234, 105, 232, 192, 125, 251, 202, 91, 177, 246, 97, 188, 95, 142, 13, 249,
        227, 239, 245, 131, 64, 162, 1, 36, 4, 88, 36, 48, 49, 56, 99, 48, 97, 101, 53, 45, 52,
        100, 57, 98, 45, 52, 55, 49, 98, 45, 98, 102, 100, 54, 45, 101, 101, 102, 51, 49, 52, 98,
        99, 55, 48, 51, 55, 88, 40, 11, 44, 124, 252, 224, 78, 152, 39, 99, 66, 214, 71, 106, 119,
        35, 192, 144, 223, 221, 21, 249, 165, 24, 231, 115, 101, 73, 233, 152, 55, 6, 149, 230,
        214, 168, 59, 74, 229, 7, 187,
    ];
    const C61_BYTES: [u8; 37] = [
        209, 132, 67, 161, 1, 15, 160, 84, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32,
        99, 111, 110, 116, 101, 110, 116, 46, 72, 114, 96, 67, 116, 80, 39, 33, 79,
    ];
    const RSA_PSS_01_BYTES: [u8; 330] = [
        216, 98, 132, 67, 161, 3, 0, 160, 84, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101,
        32, 99, 111, 110, 116, 101, 110, 116, 46, 129, 131, 68, 161, 1, 56, 36, 161, 4, 88, 31,
        109, 101, 114, 105, 97, 100, 111, 99, 46, 98, 114, 97, 110, 100, 121, 98, 117, 99, 107, 64,
        114, 115, 97, 46, 101, 120, 97, 109, 112, 108, 101, 89, 1, 0, 58, 212, 2, 112, 116, 152,
        153, 149, 242, 94, 22, 127, 153, 201, 180, 9, 111, 220, 92, 36, 45, 67, 141, 48, 56, 42,
        231, 179, 15, 131, 200, 141, 91, 94, 190, 203, 100, 210, 37, 109, 88, 211, 204, 229, 196,
        125, 52, 59, 250, 83, 43, 17, 124, 45, 4, 223, 63, 178, 6, 121, 169, 156, 243, 85, 90, 125,
        174, 96, 152, 189, 18, 59, 15, 52, 65, 161, 229, 14, 137, 124, 186, 161, 177, 124, 225,
        113, 235, 171, 32, 174, 46, 16, 241, 109, 110, 233, 24, 211, 122, 241, 2, 23, 89, 121, 190,
        101, 235, 206, 222, 180, 117, 25, 52, 110, 163, 237, 109, 19, 181, 116, 27, 198, 55, 66,
        174, 49, 52, 43, 16, 180, 111, 233, 63, 57, 181, 95, 221, 110, 50, 18, 143, 216, 180, 118,
        254, 216, 143, 103, 31, 48, 77, 9, 67, 210, 199, 163, 59, 206, 72, 223, 8, 225, 248, 144,
        207, 90, 205, 163, 239, 70, 218, 33, 152, 28, 58, 104, 124, 255, 248, 94, 235, 39, 106,
        152, 97, 47, 56, 214, 238, 99, 100, 72, 89, 214, 106, 154, 212, 153, 57, 234, 41, 15, 122,
        159, 223, 237, 154, 241, 36, 105, 48, 245, 34, 203, 140, 105, 9, 86, 125, 203, 226, 114,
        151, 22, 203, 24, 163, 30, 111, 35, 29, 179, 214, 154, 122, 67, 42, 163, 214, 250, 29, 239,
        156, 150, 89, 97, 107, 235, 98, 111, 21, 131, 120, 224, 251, 221,
    ];
    const RSA_OAEP_1_BYTES: [u8; 360] = [
        216, 96, 132, 67, 161, 1, 1, 161, 5, 76, 217, 122, 179, 165, 199, 45, 47, 13, 126, 95, 141,
        94, 88, 36, 97, 60, 139, 83, 165, 187, 205, 58, 121, 241, 49, 76, 102, 140, 185, 238, 253,
        54, 44, 26, 120, 254, 88, 172, 47, 118, 80, 185, 244, 34, 132, 222, 221, 246, 32, 28, 129,
        131, 64, 162, 1, 56, 39, 4, 88, 31, 109, 101, 114, 105, 97, 100, 111, 99, 46, 98, 114, 97,
        110, 100, 121, 98, 117, 99, 107, 64, 114, 115, 97, 46, 101, 120, 97, 109, 112, 108, 101,
        89, 1, 0, 121, 148, 20, 19, 104, 197, 254, 24, 211, 199, 92, 41, 109, 132, 179, 30, 209,
        189, 11, 157, 205, 178, 233, 195, 187, 223, 74, 25, 145, 36, 208, 62, 81, 113, 224, 155,
        249, 0, 153, 57, 108, 52, 111, 166, 45, 44, 46, 84, 116, 17, 105, 251, 47, 202, 0, 171,
        231, 38, 206, 12, 79, 85, 34, 30, 122, 99, 0, 29, 57, 194, 2, 110, 238, 138, 249, 211, 178,
        232, 233, 112, 132, 198, 51, 71, 14, 50, 151, 77, 101, 193, 224, 70, 168, 19, 25, 248, 208,
        67, 22, 113, 13, 160, 96, 245, 241, 162, 173, 48, 74, 34, 11, 126, 155, 17, 248, 107, 9,
        193, 104, 153, 53, 3, 149, 25, 243, 104, 173, 108, 214, 224, 21, 68, 135, 233, 35, 192,
        222, 67, 26, 234, 100, 37, 119, 71, 54, 253, 237, 230, 102, 242, 72, 161, 54, 179, 160,
        143, 99, 32, 140, 234, 250, 205, 233, 246, 30, 76, 255, 138, 195, 10, 97, 160, 224, 36,
        178, 139, 123, 75, 15, 119, 194, 84, 124, 86, 82, 240, 126, 247, 97, 167, 90, 65, 147, 185,
        137, 250, 92, 53, 230, 169, 41, 124, 214, 137, 82, 40, 200, 229, 178, 85, 154, 155, 125,
        217, 151, 117, 60, 186, 234, 104, 72, 51, 126, 32, 15, 240, 248, 4, 42, 165, 139, 117, 131,
        159, 121, 255, 239, 60, 58, 127, 74, 185, 222, 84, 90, 123, 6, 70, 223, 153, 144, 143, 44,
        138, 128, 244,
    ];

    #[wasm_bindgen_test]
    fn c11() {
        let kid = b"11".to_vec();
        let mut verify = CoseMessage::new_sign();
        verify.set_bytes(C11_BYTES.to_vec());
        verify.init_decoder(None).unwrap();
        let i = verify.get_agent(kid).unwrap()[0];
        let mut key = keys::CoseKey::new();
        key.set_bytes(ELEVEN.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::ES256));
        verify.set_agent_key(i, &key).unwrap();
        verify.decode(None, Some(i)).unwrap();
    }

    #[wasm_bindgen_test]
    fn prod_c11() {
        let kid = b"11".to_vec();
        let payload = b"This is the content.".to_vec();
        let mut sign = CoseMessage::new_sign();
        sign.set_payload(payload);

        let mut header = headers::CoseHeader::new();
        header.set_kid(kid, false, false);
        header.set_alg(algs::ES256, true, false);

        let mut key = keys::CoseKey::new();
        key.set_bytes(ELEVEN.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::ES256));

        let mut agent = agent::CoseAgent::new();
        agent.set_header(header);
        agent.key(&key).unwrap();

        sign.add_agent(&mut agent).unwrap();
        sign.secure_content(None).unwrap();

        let bytes = sign.encode(true).unwrap();
        assert_eq!(bytes, C11_BYTES);
    }

    #[wasm_bindgen_test]
    fn c12() {
        let kid = b"11".to_vec();
        let mut verify = CoseMessage::new_sign();
        verify.set_bytes(C12_BYTES.to_vec());
        verify.init_decoder(None).unwrap();
        let i = verify.get_agent(kid).unwrap()[0];
        let mut key = keys::CoseKey::new();
        key.set_bytes(ELEVEN.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::ES256));
        verify.set_agent_key(i, &key).unwrap();
        verify.decode(None, Some(i)).unwrap();
        // 2nd signer uses ES512 (Not Implemented)
    }

    #[wasm_bindgen_test]
    fn c13() {
        let kid = b"11".to_vec();
        let mut verify = CoseMessage::new_sign();
        verify.set_bytes(C13_BYTES.to_vec());

        verify.init_decoder(None).unwrap();
        let i = verify.get_agent(kid).unwrap()[0];
        let mut key = keys::CoseKey::new();
        key.set_bytes(ELEVEN.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::ES256));
        verify.set_agent_key(i, &key).unwrap();

        verify.decode(None, Some(i)).unwrap();

        let counter = verify.counter(b"11".to_vec(), None).unwrap()[0];
        verify.set_counter_key(counter, None, &key).unwrap();
        verify.counters_verify(None, counter, None).unwrap();
    }

    #[wasm_bindgen_test]
    fn prod_c13() {
        let kid = b"11".to_vec();
        let payload = b"This is the content.".to_vec();
        let mut sign = CoseMessage::new_sign();
        sign.set_payload(payload);

        let mut header = headers::CoseHeader::new();
        header.set_kid(kid.clone(), false, false);
        header.set_alg(algs::ES256, true, false);

        let mut key = keys::CoseKey::new();
        key.set_bytes(ELEVEN.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::ES256));

        let mut agent = agent::CoseAgent::new();
        agent.set_header(header);
        agent.key(&key).unwrap();

        sign.add_agent(&mut agent).unwrap();
        sign.secure_content(None).unwrap();

        let mut counter = agent::CoseAgent::new_counter_sig();

        let mut header = headers::CoseHeader::new();
        header.set_kid(kid, false, false);
        header.set_alg(algs::ES256, true, false);

        let mut key = keys::CoseKey::new();
        key.set_bytes(ELEVEN.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::ES256));

        counter.set_header(header);
        counter.key(&key).unwrap();

        sign.counter_sig(None, &mut counter, None).unwrap();
        sign.add_counter_sig(counter, None).unwrap();

        let bytes = sign.encode(true).unwrap();
        assert_eq!(bytes, C13_BYTES);
    }

    #[wasm_bindgen_test]
    fn c21() {
        let mut verify = CoseMessage::new_sign();
        verify.set_bytes(C21_BYTES.to_vec());
        verify.init_decoder(None).unwrap();

        let mut key = keys::CoseKey::new();
        key.set_bytes(ELEVEN.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::ES256));

        verify.key(&key).unwrap();
        verify.decode(None, None).unwrap();
    }

    #[wasm_bindgen_test]
    fn prod_c21() {
        let kid = b"11".to_vec();
        let payload = b"This is the content.".to_vec();
        let mut sign = CoseMessage::new_sign();
        sign.set_payload(payload);

        let mut header = headers::CoseHeader::new();
        header.set_kid(kid, false, false);
        header.set_alg(algs::ES256, true, false);
        sign.set_header(header);

        let mut key = keys::CoseKey::new();
        key.set_bytes(ELEVEN.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::ES256));
        sign.key(&key).unwrap();

        sign.secure_content(None).unwrap();

        let bytes = sign.encode(true).unwrap();
        assert_eq!(bytes, C21_BYTES);
    }

    #[wasm_bindgen_test]
    fn c31() {
        let kid = b"meriadoc.brandybuck@buckland.example".to_vec();
        let msg = b"This is the content.".to_vec();
        let mut dec = CoseMessage::new_encrypt();
        dec.set_bytes(C31_BYTES.to_vec());
        dec.init_decoder(None).unwrap();
        let i = dec.get_agent(kid).unwrap()[0];
        let mut key = keys::CoseKey::new();
        key.set_bytes(MERIADOC.to_vec());
        key.decode().unwrap();
        dec.set_agent_key(i, &key).unwrap();
        assert_eq!(dec.decode(None, Some(i)).unwrap(), msg);
    }

    #[wasm_bindgen_test]
    fn prod_c31() {
        let kid = b"meriadoc.brandybuck@buckland.example".to_vec();
        let payload = b"This is the content.".to_vec();
        let mut enc = CoseMessage::new_encrypt();
        enc.set_payload(payload);

        let mut header = headers::CoseHeader::new();
        header.set_alg(algs::A128GCM, true, false);
        header.set_iv(
            vec![201, 207, 77, 242, 254, 108, 99, 43, 247, 136, 100, 19],
            false,
            false,
        );
        enc.set_header(header);

        let mut key = keys::CoseKey::new();
        key.set_bytes(MERIADOC.to_vec());
        key.decode().unwrap();
        let mut agent = agent::CoseAgent::new();
        header = headers::CoseHeader::new();
        header.set_alg(algs::ECDH_ES_HKDF_256, true, false);

        agent.set_header(header);
        agent.key(&key).unwrap();

        let mut key1 = keys::CoseKey::new();
        key1.set_bytes(PEREGRIN_PROD.to_vec());
        key1.decode().unwrap();
        key1.set_y_parity(Some(true));

        agent.ephemeral_key(key1, false, false);
        agent.header.set_kid(kid, false, false);

        enc.add_agent(&mut agent).unwrap();

        enc.secure_content(None).unwrap();

        let bytes = enc.encode(true).unwrap();
        assert_eq!(bytes, C31_BYTES);
    }

    #[wasm_bindgen_test]
    fn c32() {
        let kid = b"our-secret".to_vec();
        let msg = b"This is the content.".to_vec();
        let mut dec = CoseMessage::new_encrypt();
        dec.set_bytes(C32_BYTES.to_vec());
        dec.init_decoder(None).unwrap();
        let i = dec.get_agent(kid).unwrap()[0];
        let mut key = keys::CoseKey::new();
        key.set_bytes(OUR_SECRET.to_vec());
        key.decode().unwrap();
        key.set_alg(dec.agents[i].header.alg);
        dec.set_party_identity(i, b"lighting-client".to_vec(), true);
        dec.set_party_identity(i, b"lighting-server".to_vec(), false);
        dec.set_pub_other(i, b"Encryption Example 02".to_vec());
        dec.set_agent_key(i, &key).unwrap();
        assert_eq!(dec.decode(None, Some(i)).unwrap(), msg);
    }

    #[wasm_bindgen_test]
    fn prod_c32() {
        let kid = b"our-secret".to_vec();
        let salt = b"aabbccddeeffgghh".to_vec();
        let payload = b"This is the content.".to_vec();
        let mut enc = CoseMessage::new_encrypt();
        enc.set_payload(payload);

        let mut header = headers::CoseHeader::new();
        header.set_alg(algs::AES_CCM_16_64_128, true, false);
        header.set_iv(
            vec![137, 245, 47, 101, 161, 197, 128, 147, 59, 82, 97, 167, 108],
            false,
            false,
        );
        enc.set_header(header);

        let mut key = keys::CoseKey::new();
        key.set_bytes(OUR_SECRET.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::DIRECT_HKDF_SHA_256));

        let mut agent = agent::CoseAgent::new();
        header = headers::CoseHeader::new();
        header.set_alg(algs::DIRECT_HKDF_SHA_256, true, false);
        header.set_salt(salt, false, false);
        header.set_kid(kid, false, false);
        header.set_party_identity(b"lighting-client".to_vec(), false, false, true, false);
        header.set_party_identity(b"lighting-server".to_vec(), false, false, false, false);
        header.set_pub_other(Some(b"Encryption Example 02".to_vec()));

        agent.set_header(header);
        agent.key(&key).unwrap();

        enc.add_agent(&mut agent).unwrap();

        enc.secure_content(None).unwrap();

        let bytes = enc.encode(true).unwrap();
        assert_eq!(bytes, C32_BYTES);
    }

    #[wasm_bindgen_test]
    fn c33() {
        let mut dec = CoseMessage::new_encrypt();
        dec.set_bytes(C33_BYTES.to_vec());
        dec.init_decoder(None).unwrap();

        let mut key = keys::CoseKey::new();

        key.set_bytes(MERIADOC.to_vec());
        key.decode().unwrap();
        dec.set_agent_key(0, &key).unwrap();
        let decoded = dec.decode(None, Some(0)).unwrap();
        assert_eq!(decoded, b"This is the content.".to_vec());
        // Counter signature uses ES512 (Not implemented)
    }

    #[wasm_bindgen_test]
    fn c34() {
        let kid = b"meriadoc.brandybuck@buckland.example".to_vec();
        let msg = b"This is the content.".to_vec();
        let aad = vec![0, 17, 187, 204, 34, 221, 68, 238, 85, 255, 102, 0, 119];
        let mut dec = CoseMessage::new_encrypt();
        dec.set_bytes(C34_BYTES.to_vec());
        dec.init_decoder(None).unwrap();
        let i = dec.get_agent(kid).unwrap()[0];
        let mut key = keys::CoseKey::new();
        key.set_bytes(MERIADOC.to_vec());
        key.decode().unwrap();
        key.set_key_ops(vec![keys::KEY_OPS_DERIVE]);
        dec.set_agent_key(i, &key).unwrap();
        key = keys::CoseKey::new();
        key.set_bytes(PEREGRIN.to_vec());
        key.decode().unwrap();
        key.set_key_ops(vec![keys::KEY_OPS_DERIVE]);
        dec.set_ecdh_key(i, key);
        assert_eq!(dec.decode(Some(aad), Some(i)).unwrap(), msg);
    }
    #[wasm_bindgen_test]
    fn prod_c34() {
        let kid = b"meriadoc.brandybuck@buckland.example".to_vec();
        let aad = vec![0, 17, 187, 204, 34, 221, 68, 238, 85, 255, 102, 0, 119];
        let payload = b"This is the content.".to_vec();
        let mut enc = CoseMessage::new_encrypt();
        enc.set_payload(payload);

        let mut header = headers::CoseHeader::new();
        header.set_alg(algs::A128GCM, true, false);
        header.set_iv(
            vec![2, 209, 247, 230, 242, 108, 67, 212, 134, 141, 135, 206],
            false,
            false,
        );
        enc.set_header(header);

        let mut key = keys::CoseKey::new();
        key.set_bytes(MERIADOC.to_vec());
        key.decode().unwrap();

        let mut agent = agent::CoseAgent::new();
        header = headers::CoseHeader::new();
        header.set_alg(algs::ECDH_SS_A128KW, true, false);

        agent.set_header(header);
        agent.key(&key).unwrap();

        let mut key1 = keys::CoseKey::new();
        key1.set_bytes(PEREGRIN_PROD.to_vec());
        key1.decode().unwrap();

        agent.header.set_static_kid(
            b"peregrin.took@tuckborough.example".to_vec(),
            key1,
            false,
            false,
        );
        agent.header.set_kid(kid.clone(), false, false);
        agent.header.set_party_nonce(vec![1, 1], false, false, true);

        enc.add_agent(&mut agent).unwrap();

        enc.secure_content(Some(aad)).unwrap();

        let mut output = enc.encode(true).unwrap();
        let mut expected = C34_BYTES.to_vec();

        // Remove ciphertext and cek (probabilistic) for comparison
        let mut prob = vec![
            100, 248, 77, 145, 59, 166, 10, 118, 7, 10, 154, 72, 242, 110, 151, 232, 99, 226, 133,
            41, 216, 245, 51, 94, 95, 1, 101, 238, 233, 118, 180, 165, 246, 198, 240, 157,
        ];

        let mut index = expected
            .windows(prob.len())
            .position(|window| window == &prob)
            .unwrap();

        expected.drain(index..index + prob.len());
        output.drain(index..index + prob.len());

        prob = vec![
            65, 224, 215, 111, 87, 157, 189, 13, 147, 106, 102, 45, 84, 216, 88, 32, 55, 222, 46,
            54, 111, 222, 28, 98,
        ];

        index = expected
            .windows(prob.len())
            .position(|window| window == &prob)
            .unwrap();

        expected.drain(index..index + prob.len());
        output.drain(index..index + prob.len());

        assert_eq!(output, expected);
    }

    #[wasm_bindgen_test]
    fn c41() {
        let msg = b"This is the content.".to_vec();
        let mut dec = CoseMessage::new_encrypt();
        dec.set_bytes(C41_BYTES.to_vec());
        dec.init_decoder(None).unwrap();
        let mut key = keys::CoseKey::new();
        key.set_bytes(OUR_SECRET2.to_vec());
        key.decode().unwrap();
        key.set_alg(dec.header.alg);
        dec.key(&key).unwrap();
        assert_eq!(dec.decode(None, None).unwrap(), msg);
    }

    #[wasm_bindgen_test]
    fn prod_c41() {
        let payload = b"This is the content.".to_vec();
        let mut enc = CoseMessage::new_encrypt();
        enc.set_payload(payload);

        let mut header = headers::CoseHeader::new();
        header.set_alg(algs::AES_CCM_16_64_128, true, false);
        header.set_iv(
            vec![137, 245, 47, 101, 161, 197, 128, 147, 59, 82, 97, 167, 140],
            false,
            false,
        );
        enc.set_header(header);

        let mut key = keys::CoseKey::new();
        key.set_bytes(OUR_SECRET2.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::AES_CCM_16_64_128));

        enc.key(&key).unwrap();
        enc.secure_content(None).unwrap();

        let bytes = enc.encode(true).unwrap();
        assert_eq!(bytes, C41_BYTES);
    }

    #[wasm_bindgen_test]
    fn c42() {
        let msg = b"This is the content.".to_vec();
        let mut dec = CoseMessage::new_encrypt();
        dec.set_bytes(C42_BYTES.to_vec());
        dec.init_decoder(None).unwrap();
        let mut key = keys::CoseKey::new();
        key.set_bytes(OUR_SECRET2.to_vec());
        key.decode().unwrap();
        key.set_base_iv(Some(vec![137, 245, 47, 101, 161, 197, 128, 147]));
        key.set_alg(dec.header.alg);
        dec.key(&key).unwrap();
        assert_eq!(dec.decode(None, None).unwrap(), msg);
    }

    #[wasm_bindgen_test]
    fn prod_c42() {
        let payload = b"This is the content.".to_vec();
        let mut sign = CoseMessage::new_encrypt();
        sign.set_payload(payload);

        let mut header = headers::CoseHeader::new();
        header.set_alg(algs::AES_CCM_16_64_128, true, false);
        header.set_partial_iv(vec![97, 167], false, false);
        sign.set_header(header);

        let mut key = keys::CoseKey::new();
        key.set_bytes(OUR_SECRET2.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::AES_CCM_16_64_128));
        key.set_base_iv(Some(vec![137, 245, 47, 101, 161, 197, 128, 147]));

        sign.key(&key).unwrap();
        sign.secure_content(None).unwrap();

        let bytes = sign.encode(true).unwrap();
        assert_eq!(bytes, C42_BYTES);
    }

    #[wasm_bindgen_test]
    fn c51() {
        let mut verify = CoseMessage::new_mac();
        verify.set_bytes(C51_BYTES.to_vec());
        verify.init_decoder(None).unwrap();
        let i = verify.get_agent(b"our-secret".to_vec()).unwrap()[0];
        let mut key = keys::CoseKey::new();
        key.set_bytes(OUR_SECRET.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::AES_MAC_256_64));
        verify.set_agent_key(i, &key).unwrap();
        verify.decode(None, Some(i)).unwrap();
    }

    #[wasm_bindgen_test]
    fn prod_c51() {
        let kid = b"our-secret".to_vec();
        let payload = b"This is the content.".to_vec();
        let mut mac = CoseMessage::new_mac();
        mac.set_payload(payload);

        let mut header = headers::CoseHeader::new();
        header.set_alg(algs::AES_MAC_256_64, true, false);
        mac.set_header(header);

        let mut header = headers::CoseHeader::new();
        header.set_alg(algs::DIRECT, false, false);
        header.set_kid(kid, false, false);

        let mut key = keys::CoseKey::new();
        key.set_bytes(OUR_SECRET.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::AES_MAC_256_64));

        let mut agent = agent::CoseAgent::new();
        agent.set_header(header);
        agent.key(&key).unwrap();

        mac.add_agent(&mut agent).unwrap();
        mac.secure_content(None).unwrap();

        let bytes = mac.encode(true).unwrap();
        assert_eq!(bytes, C51_BYTES);
    }

    #[wasm_bindgen_test]
    fn c52() {
        let kid = b"meriadoc.brandybuck@buckland.example".to_vec();
        let mut verify = CoseMessage::new_mac();
        verify.set_bytes(C52_BYTES.to_vec());
        verify.init_decoder(None).unwrap();
        let i = verify.get_agent(kid).unwrap()[0];
        let mut key = keys::CoseKey::new();
        key.set_bytes(MERIADOC.to_vec());
        key.decode().unwrap();
        verify.set_agent_key(i, &key).unwrap();
        key = keys::CoseKey::new();
        key.set_bytes(PEREGRIN.to_vec());
        key.decode().unwrap();
        verify.set_ecdh_key(i, key);

        verify.decode(None, Some(i)).unwrap();
    }

    #[wasm_bindgen_test]
    fn prod_c52() {
        let kid = b"meriadoc.brandybuck@buckland.example".to_vec();
        let payload = b"This is the content.".to_vec();
        let mut mac = CoseMessage::new_mac();
        mac.set_payload(payload);

        let mut header = headers::CoseHeader::new();
        header.set_alg(algs::HMAC_256_256, true, false);
        mac.set_header(header);

        let mut key = keys::CoseKey::new();
        key.set_bytes(MERIADOC.to_vec());
        key.decode().unwrap();

        let mut agent = agent::CoseAgent::new();
        header = headers::CoseHeader::new();
        header.set_alg(algs::ECDH_SS_HKDF_256, true, false);

        let mut key1 = keys::CoseKey::new();
        key1.set_bytes(PEREGRIN_PROD.to_vec());
        key1.decode().unwrap();

        header.set_static_kid(
            b"peregrin.took@tuckborough.example".to_vec(),
            key1,
            false,
            false,
        );
        header.set_kid(kid.clone(), false, false);
        header.set_party_nonce(
            vec![
                77, 133, 83, 231, 231, 79, 60, 106, 58, 157, 211, 239, 40, 106, 129, 149, 203, 248,
                162, 61, 25, 85, 140, 207, 236, 125, 52, 184, 36, 244, 45, 146, 189, 6, 189, 44,
                127, 2, 113, 240, 33, 78, 20, 31, 183, 121, 174, 40, 86, 171, 245, 133, 165, 131,
                104, 176, 23, 231, 242, 169, 229, 206, 77, 181,
            ],
            false,
            false,
            true,
        );

        agent.set_header(header);
        agent.key(&key).unwrap();

        mac.add_agent(&mut agent).unwrap();

        mac.secure_content(None).unwrap();

        let bytes = mac.encode(true).unwrap();
        assert_eq!(bytes, C52_BYTES);
    }

    #[wasm_bindgen_test]
    fn c53() {
        let kid = b"018c0ae5-4d9b-471b-bfd6-eef314bc7037".to_vec();
        let mut verify = CoseMessage::new_mac();
        verify.set_bytes(C53_BYTES.to_vec());
        verify.init_decoder(None).unwrap();
        let i = verify.get_agent(kid).unwrap()[0];
        let mut key = keys::CoseKey::new();
        key.set_bytes(UID.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::AES_MAC_128_64));
        verify.set_agent_key(i, &key).unwrap();

        verify.decode(None, Some(i)).unwrap();
    }
    #[wasm_bindgen_test]
    fn prod_c53() {
        let kid = b"018c0ae5-4d9b-471b-bfd6-eef314bc7037".to_vec();
        let payload = b"This is the content.".to_vec();
        let mut mac = CoseMessage::new_mac();
        mac.set_payload(payload);

        let mut header = headers::CoseHeader::new();
        header.set_alg(algs::AES_MAC_128_64, true, false);
        mac.set_header(header);

        let mut header = headers::CoseHeader::new();
        header.set_alg(algs::A256KW, false, false);
        header.set_kid(kid, false, false);

        let mut key = keys::CoseKey::new();
        key.set_bytes(UID.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::A256KW));

        let mut agent = agent::CoseAgent::new();
        agent.set_header(header);
        agent.key(&key).unwrap();

        mac.add_agent(&mut agent).unwrap();
        mac.secure_content(None).unwrap();

        let mut bytes = mac.encode(true).unwrap();
        let mut expected = C53_BYTES.to_vec();

        // Remove probabilistic
        let mut prob = vec![54, 245, 175, 175, 11, 171, 93, 67];
        let mut index = expected
            .windows(prob.len())
            .position(|window| window == &prob)
            .unwrap();

        expected.drain(index..index + prob.len());
        bytes.drain(index..index + prob.len());

        prob = vec![
            113, 26, 176, 220, 47, 196, 88, 93, 206, 39, 239, 250, 103, 129, 200, 9, 62, 186, 144,
            111, 34, 123, 110, 176,
        ];

        index = expected
            .windows(prob.len())
            .position(|window| window == &prob)
            .unwrap();

        expected.drain(index..index + prob.len());
        bytes.drain(index..index + prob.len());

        assert_eq!(bytes, expected);
    }

    #[wasm_bindgen_test]
    fn c54() {
        let kid = b"018c0ae5-4d9b-471b-bfd6-eef314bc7037".to_vec();
        let mut verify = CoseMessage::new_mac();
        verify.set_bytes(C54_BYTES.to_vec());
        verify.init_decoder(None).unwrap();
        let i = verify.get_agent(kid).unwrap()[0];
        let mut key = keys::CoseKey::new();
        key.set_bytes(UID.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::AES_MAC_128_64));
        verify.set_agent_key(i, &key).unwrap();

        verify.decode(None, Some(i)).unwrap();
        //2nd recipient uses ES512  (Not implemented)
    }

    #[wasm_bindgen_test]
    fn c61() {
        let mut verify = CoseMessage::new_mac();
        verify.set_bytes(C61_BYTES.to_vec());
        verify.init_decoder(None).unwrap();
        let mut key = keys::CoseKey::new();
        key.set_bytes(OUR_SECRET.to_vec());
        key.decode().unwrap();
        key.set_alg(Some(algs::AES_MAC_256_64));
        verify.key(&key).unwrap();
        verify.decode(None, None).unwrap();
    }

    #[wasm_bindgen_test]
    fn prod_c61() {
        let payload = b"This is the content.".to_vec();
        let mut mac = CoseMessage::new_mac();
        mac.set_payload(payload);

        let mut header = headers::CoseHeader::new();
        header.set_alg(algs::AES_MAC_256_64, true, false);

        let mut key = keys::CoseKey::new();
        key.set_bytes(OUR_SECRET.to_vec());
        key.decode().unwrap();

        mac.set_header(header);
        mac.key(&key).unwrap();

        mac.secure_content(None).unwrap();

        let bytes = mac.encode(true).unwrap();
        assert_eq!(bytes, C61_BYTES);
    }

    #[wasm_bindgen_test]
    fn rsa_pss_01() {
        let kid = b"meriadoc.brandybuck@rsa.example".to_vec();
        let mut verify = CoseMessage::new_sign();
        verify.set_bytes(RSA_PSS_01_BYTES.to_vec());

        verify.init_decoder(None).unwrap();
        let i = verify.get_agent(kid).unwrap()[0];
        let mut key = keys::CoseKey::new();
        key.set_bytes(RSA_PUB.to_vec());
        key.decode().unwrap();

        verify.set_agent_key(i, &key).unwrap();

        verify.decode(None, Some(i)).unwrap();
    }

    #[wasm_bindgen_test]
    fn prod_rsa_pss_01() {
        let msg = b"This is the content.".to_vec();
        let kid = b"meriadoc.brandybuck@rsa.example".to_vec();
        let mut sign = CoseMessage::new_sign();

        let mut header = headers::CoseHeader::new();
        header.set_content_type(0, true, false);
        sign.set_header(header);
        sign.set_payload(msg);

        let mut agent = agent::CoseAgent::new();
        let mut agent_h = headers::CoseHeader::new();
        agent_h.set_alg(algs::PS256, true, false);
        agent_h.set_kid(kid, false, false);
        agent.set_header(agent_h);

        let mut key = keys::CoseKey::new();
        key.set_bytes(RSA_PRIV.to_vec());
        key.decode().unwrap();
        agent.key(&key).unwrap();

        sign.add_agent(&mut agent).unwrap();

        sign.secure_content(None).unwrap();

        let mut output = sign.encode(true).unwrap();
        let mut expected = RSA_PSS_01_BYTES.to_vec();

        // Remove probabilistic
        let prob = vec![
            58, 212, 2, 112, 116, 152, 153, 149, 242, 94, 22, 127, 153, 201, 180, 9, 111, 220, 92,
            36, 45, 67, 141, 48, 56, 42, 231, 179, 15, 131, 200, 141, 91, 94, 190, 203, 100, 210,
            37, 109, 88, 211, 204, 229, 196, 125, 52, 59, 250, 83, 43, 17, 124, 45, 4, 223, 63,
            178, 6, 121, 169, 156, 243, 85, 90, 125, 174, 96, 152, 189, 18, 59, 15, 52, 65, 161,
            229, 14, 137, 124, 186, 161, 177, 124, 225, 113, 235, 171, 32, 174, 46, 16, 241, 109,
            110, 233, 24, 211, 122, 241, 2, 23, 89, 121, 190, 101, 235, 206, 222, 180, 117, 25, 52,
            110, 163, 237, 109, 19, 181, 116, 27, 198, 55, 66, 174, 49, 52, 43, 16, 180, 111, 233,
            63, 57, 181, 95, 221, 110, 50, 18, 143, 216, 180, 118, 254, 216, 143, 103, 31, 48, 77,
            9, 67, 210, 199, 163, 59, 206, 72, 223, 8, 225, 248, 144, 207, 90, 205, 163, 239, 70,
            218, 33, 152, 28, 58, 104, 124, 255, 248, 94, 235, 39, 106, 152, 97, 47, 56, 214, 238,
            99, 100, 72, 89, 214, 106, 154, 212, 153, 57, 234, 41, 15, 122, 159, 223, 237, 154,
            241, 36, 105, 48, 245, 34, 203, 140, 105, 9, 86, 125, 203, 226, 114, 151, 22, 203, 24,
            163, 30, 111, 35, 29, 179, 214, 154, 122, 67, 42, 163, 214, 250, 29, 239, 156, 150, 89,
            97, 107, 235, 98, 111, 21, 131, 120, 224, 251, 221,
        ];
        let index = expected
            .windows(prob.len())
            .position(|window| window == &prob)
            .unwrap();

        expected.drain(index..index + prob.len());
        output.drain(index..index + prob.len());

        assert_eq!(output, expected);
    }

    #[wasm_bindgen_test]
    fn rsa_oaep_01() {
        let msg = b"This is the content.".to_vec();
        let kid = b"meriadoc.brandybuck@rsa.example".to_vec();
        let mut dec = CoseMessage::new_encrypt();
        dec.set_bytes(RSA_OAEP_1_BYTES.to_vec());
        dec.init_decoder(None).unwrap();
        let i = dec.get_agent(kid).unwrap()[0];
        let mut key = keys::CoseKey::new();
        key.set_bytes(RSA_PRIV.to_vec());
        key.decode().unwrap();
        dec.set_agent_key(i, &key).unwrap();

        assert_eq!(dec.decode(None, Some(i)).unwrap(), msg);
    }

    #[wasm_bindgen_test]
    fn prod_rsa_oaep_01() {
        use crate::agent;
        use crate::algs;
        use crate::headers;

        let msg = b"This is the content.".to_vec();
        let kid = b"meriadoc.brandybuck@rsa.example".to_vec();
        let mut enc = CoseMessage::new_encrypt();
        let mut header = headers::CoseHeader::new();
        header.set_alg(algs::A128GCM, true, false);
        header.set_iv(
            vec![217, 122, 179, 165, 199, 45, 47, 13, 126, 95, 141, 94],
            false,
            false,
        );
        enc.set_header(header);
        enc.set_payload(msg);

        let mut agent = agent::CoseAgent::new();
        let mut agent_h = headers::CoseHeader::new();
        agent_h.set_alg(algs::RSA_OAEP_1, false, false);
        agent_h.set_kid(kid, false, false);
        agent.set_header(agent_h);

        let mut key = keys::CoseKey::new();
        key.set_bytes(RSA_PUB.to_vec());
        key.decode().unwrap();
        agent.key(&key).unwrap();

        enc.add_agent(&mut agent).unwrap();

        enc.secure_content(None).unwrap();

        let mut output = enc.encode(true).unwrap();
        let mut expected = RSA_OAEP_1_BYTES.to_vec();

        // Remove probabilistic
        let mut prob = vec![
            97, 60, 139, 83, 165, 187, 205, 58, 121, 241, 49, 76, 102, 140, 185, 238, 253, 54, 44,
            26, 120, 254, 88, 172, 47, 118, 80, 185, 244, 34, 132, 222, 221, 246, 32, 28,
        ];
        let mut index = expected
            .windows(prob.len())
            .position(|window| window == &prob)
            .unwrap();

        expected.drain(index..index + prob.len());
        output.drain(index..index + prob.len());

        prob = vec![
            121, 148, 20, 19, 104, 197, 254, 24, 211, 199, 92, 41, 109, 132, 179, 30, 209, 189, 11,
            157, 205, 178, 233, 195, 187, 223, 74, 25, 145, 36, 208, 62, 81, 113, 224, 155, 249, 0,
            153, 57, 108, 52, 111, 166, 45, 44, 46, 84, 116, 17, 105, 251, 47, 202, 0, 171, 231,
            38, 206, 12, 79, 85, 34, 30, 122, 99, 0, 29, 57, 194, 2, 110, 238, 138, 249, 211, 178,
            232, 233, 112, 132, 198, 51, 71, 14, 50, 151, 77, 101, 193, 224, 70, 168, 19, 25, 248,
            208, 67, 22, 113, 13, 160, 96, 245, 241, 162, 173, 48, 74, 34, 11, 126, 155, 17, 248,
            107, 9, 193, 104, 153, 53, 3, 149, 25, 243, 104, 173, 108, 214, 224, 21, 68, 135, 233,
            35, 192, 222, 67, 26, 234, 100, 37, 119, 71, 54, 253, 237, 230, 102, 242, 72, 161, 54,
            179, 160, 143, 99, 32, 140, 234, 250, 205, 233, 246, 30, 76, 255, 138, 195, 10, 97,
            160, 224, 36, 178, 139, 123, 75, 15, 119, 194, 84, 124, 86, 82, 240, 126, 247, 97, 167,
            90, 65, 147, 185, 137, 250, 92, 53, 230, 169, 41, 124, 214, 137, 82, 40, 200, 229, 178,
            85, 154, 155, 125, 217, 151, 117, 60, 186, 234, 104, 72, 51, 126, 32, 15, 240, 248, 4,
            42, 165, 139, 117, 131, 159, 121, 255, 239, 60, 58, 127, 74, 185, 222, 84, 90, 123, 6,
            70, 223, 153, 144, 143, 44, 138, 128, 244,
        ];

        index = expected
            .windows(prob.len())
            .position(|window| window == &prob)
            .unwrap();

        expected.drain(index..index + prob.len());
        output.drain(index..index + prob.len());

        assert_eq!(output, expected);
    }
}
